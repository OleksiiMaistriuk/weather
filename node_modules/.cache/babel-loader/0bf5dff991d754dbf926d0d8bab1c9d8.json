{"ast":null,"code":"// import { GroupBase } from 'react-select';\n// import { LoadOptions } from 'react-select-async-paginate';\n// import { apiOptions } from '../../../../axios/geoApiOptions';\n// const loadOptions: LoadOptions<\n//   string,\n//   GroupBase<string>,\n//   any\n// > = async inputText => {\n//   return await fetch(\n//     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\n//     apiOptions,\n//   )\n//     .then(response => response.json())\n//     .then(response => ({\n//       options: response.data.map((city: ICity) => ({\n//         label: `${city.name} ${city.countryCode}`,\n//         value: { latitude: city.latitude, longitude: city.longitude },\n//       })),\n//     }))\n//     .catch(err => console.error(err));\n// };\n// export default loadOptions;\nimport { apiOptions } from '../../../../axios/geoApiOptions';\n\nconst loadOptions = async inputText => {\n  const response = await fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`, apiOptions);\n  const responseJSON = await response.json();\n  console.log('responseJSON', responseJSON);\n  return {\n    options: responseJSON.data.map(city => ({\n      label: `${city.name} ${city.countryCode}`,\n      value: {\n        latitude: city.latitude,\n        longitude: city.longitude\n      }\n    }))\n  };\n};\n\nexport default loadOptions;","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/loadOptions.ts"],"names":["apiOptions","loadOptions","inputText","response","fetch","responseJSON","json","console","log","options","data","map","city","label","name","countryCode","value","latitude","longitude"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SAASA,UAAT,QAA2B,iCAA3B;;AAOA,MAAMC,WAIL,GAAG,MAAMC,SAAN,IAAmB;AACrB,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,oFAAmFF,SAAU,EADpE,EAE1BF,UAF0B,CAA5B;AAIA,QAAMK,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;AACA,SAAO;AACLI,IAAAA,OAAO,EAAEJ,YAAY,CAACK,IAAb,CAAkBC,GAAlB,CAAuBC,IAAD,KAAkB;AAC/CC,MAAAA,KAAK,EAAG,GAAED,IAAI,CAACE,IAAK,IAAGF,IAAI,CAACG,WAAY,EADO;AAE/CC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAEL,IAAI,CAACK,QAAjB;AAA2BC,QAAAA,SAAS,EAAEN,IAAI,CAACM;AAA3C;AAFwC,KAAlB,CAAtB;AADJ,GAAP;AAMD,CAlBD;;AAmBA,eAAejB,WAAf","sourcesContent":["// import { GroupBase } from 'react-select';\r\n// import { LoadOptions } from 'react-select-async-paginate';\r\n// import { apiOptions } from '../../../../axios/geoApiOptions';\r\n\r\n// const loadOptions: LoadOptions<\r\n//   string,\r\n//   GroupBase<string>,\r\n//   any\r\n// > = async inputText => {\r\n//   return await fetch(\r\n//     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n//     apiOptions,\r\n//   )\r\n//     .then(response => response.json())\r\n//     .then(response => ({\r\n//       options: response.data.map((city: ICity) => ({\r\n//         label: `${city.name} ${city.countryCode}`,\r\n//         value: { latitude: city.latitude, longitude: city.longitude },\r\n//       })),\r\n//     }))\r\n//     .catch(err => console.error(err));\r\n// };\r\n// export default loadOptions;\r\n\r\nimport { GroupBase } from 'react-select';\r\nimport { LoadOptions } from 'react-select-async-paginate';\r\nimport { apiOptions } from '../../../../axios/geoApiOptions';\r\ninterface ICity {\r\n  name: string;\r\n  countryCode: string;\r\n  latitude: string;\r\n  longitude: string;\r\n}\r\nconst loadOptions: LoadOptions<\r\n  string,\r\n  GroupBase<string>,\r\n  any\r\n> = async inputText => {\r\n  const response = await fetch(\r\n    `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n    apiOptions,\r\n  );\r\n  const responseJSON = await response.json();\r\n\r\n  console.log('responseJSON', responseJSON);\r\n  return {\r\n    options: responseJSON.data.map((city: ICity) => ({\r\n      label: `${city.name} ${city.countryCode}`,\r\n      value: { latitude: city.latitude, longitude: city.longitude },\r\n    })),\r\n  };\r\n};\r\nexport default loadOptions;\r\n"]},"metadata":{},"sourceType":"module"}