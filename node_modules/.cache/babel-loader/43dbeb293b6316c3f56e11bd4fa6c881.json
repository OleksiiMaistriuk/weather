{"ast":null,"code":"var _jsxFileName = \"C:\\\\apps\\\\weather\\\\src\\\\pages\\\\Home\\\\components\\\\Search\\\\Search.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { AsyncPaginate } from 'react-select-async-paginate';\nimport { options } from '../../../../axios/geoApiOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Search = () => {\n  _s();\n\n  const [search, setSearch] = useState();\n\n  const handleChange = optionData => {\n    // console.log(optionData?.label);\n    // console.log(optionData?.value);\n    // setSearch(optionData);\n    console.log(optionData);\n  };\n\n  const loadOptions = inputValue => {\n    return fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputValue}`, options).then(response => response.json()).then(response => {\n      return {\n        options: response.data.map(city => {\n          return {\n            latitude: `${city.latitude}`,\n            longitude: ` ${city.longitude}`,\n            name: `${city.name} `,\n            countryCode: `${city.countryCode}`\n          };\n        })\n      };\n    }).catch(err => console.error(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n      placeholder: \"Search the city\",\n      debounceTimeout: 600,\n      value: search,\n      onChange: handleChange,\n      loadOptions: loadOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"KLrPbisl3Mlzlvtc6UZb5fIFlSg=\");\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/Search.tsx"],"names":["useState","AsyncPaginate","options","Search","search","setSearch","handleChange","optionData","console","log","loadOptions","inputValue","fetch","then","response","json","data","map","city","latitude","longitude","name","countryCode","catch","err","error"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,OAAT,QAAwB,iCAAxB;;AAaA,OAAO,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,MAAD,EAASC,SAAT,IACJL,QAAQ,EADV;;AAGA,QAAMM,YAAY,GAAIC,UAAD,IAAwC;AAC3D;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACD,GALD;;AAOA,QAAMG,WAAW,GAAIC,UAAD,IAAwB;AAC1C,WAAOC,KAAK,CACT,oFAAmFD,UAAW,EADrF,EAEVT,OAFU,CAAL,CAIJW,IAJI,CAICC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJb,EAKJF,IALI,CAKCC,QAAQ,IAAI;AAChB,aAAO;AACLZ,QAAAA,OAAO,EAAEY,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBC,IAAD,IAAgB;AACzC,iBAAO;AACLC,YAAAA,QAAQ,EAAG,GAAED,IAAI,CAACC,QAAS,EADtB;AAELC,YAAAA,SAAS,EAAG,IAAGF,IAAI,CAACE,SAAU,EAFzB;AAGLC,YAAAA,IAAI,EAAG,GAAEH,IAAI,CAACG,IAAK,GAHd;AAILC,YAAAA,WAAW,EAAG,GAAEJ,IAAI,CAACI,WAAY;AAJ5B,WAAP;AAMD,SAPQ;AADJ,OAAP;AAUD,KAhBI,EAiBJC,KAjBI,CAiBEC,GAAG,IAAIhB,OAAO,CAACiB,KAAR,CAAcD,GAAd,CAjBT,CAAP;AAkBD,GAnBD;;AAqBA,sBACE;AAAA,2BACE,QAAC,aAAD;AACE,MAAA,WAAW,EAAC,iBADd;AAEE,MAAA,eAAe,EAAE,GAFnB;AAGE,MAAA,KAAK,EAAEpB,MAHT;AAIE,MAAA,QAAQ,EAAEE,YAJZ;AAKE,MAAA,WAAW,EAAEI;AALf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA3CM;;GAAMP,M;;KAAAA,M","sourcesContent":["import { useState } from 'react';\r\nimport { SingleValue } from 'react-select';\r\nimport { AsyncPaginate } from 'react-select-async-paginate';\r\nimport { options } from '../../../../axios/geoApiOptions';\r\n\r\ntype MyOption = {\r\n  label: string;\r\n  value: string;\r\n};\r\n\r\ntype City = {\r\n  latitude: string;\r\n  longitude: string;\r\n  name: string;\r\n  countryCode: string;\r\n};\r\nexport const Search = () => {\r\n  const [search, setSearch] =\r\n    useState<React.Dispatch<React.SetStateAction<MyOption>>>();\r\n\r\n  const handleChange = (optionData?: SingleValue<MyOption>) => {\r\n    // console.log(optionData?.label);\r\n    // console.log(optionData?.value);\r\n    // setSearch(optionData);\r\n    console.log(optionData);\r\n  };\r\n\r\n  const loadOptions = (inputValue: string) => {\r\n    return fetch(\r\n      `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputValue}`,\r\n      options,\r\n    )\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        return {\r\n          options: response.data.map((city: City) => {\r\n            return {\r\n              latitude: `${city.latitude}`,\r\n              longitude: ` ${city.longitude}`,\r\n              name: `${city.name} `,\r\n              countryCode: `${city.countryCode}`,\r\n            };\r\n          }),\r\n        };\r\n      })\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AsyncPaginate\r\n        placeholder=\"Search the city\"\r\n        debounceTimeout={600}\r\n        value={search}\r\n        onChange={handleChange}\r\n        loadOptions={loadOptions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}