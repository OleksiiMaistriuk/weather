{"ast":null,"code":"var _jsxFileName = \"C:\\\\apps\\\\weather\\\\src\\\\pages\\\\Home\\\\components\\\\Search\\\\Search.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { AsyncPaginate } from 'react-select-async-paginate';\nimport { options } from '../../../../axios/geoApiOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Search = () => {\n  _s();\n\n  const [search, setSearch] = useState('');\n  const [lacation, setlacation] = useState('');\n  useEffect(() => {\n    console.log(search);\n    console.log(lacation);\n  }, [search, lacation]);\n\n  const handleChange = optionData => {\n    setSearch(optionData.label);\n    setlacation(optionData.value); // console.log(optionData.value);\n    // console.log(optionData.label);\n  }; // const loadOptions = (\n  //     inputText: string,\n  //     callback: (options: OptionTypeBase[]) => void\n  // ): void =>\n\n\n  const loadOptions = inputText => {\n    return fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`, options).then(response => response.json()).then(response => {\n      return {\n        options: response.data.map(city => {\n          return {\n            label: `${city.name} ${city.countryCode}`,\n            value: [city.latitude, city.longitude]\n          };\n        })\n      };\n    }).catch(err => console.error(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n      placeholder: \"Search the city\",\n      debounceTimeout: 600,\n      value: search // @ts-ignore\n      ,\n      onChange: handleChange // @ts-ignore\n      ,\n      loadOptions: loadOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"zlXTFfXkfl1T8eE5jeJMRAbrLGM=\");\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/Search.tsx"],"names":["useEffect","useState","AsyncPaginate","options","Search","search","setSearch","lacation","setlacation","console","log","handleChange","optionData","label","value","loadOptions","inputText","fetch","then","response","json","data","map","city","name","countryCode","latitude","longitude","catch","err","error"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,OAAT,QAAwB,iCAAxB;;AAaA,OAAO,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAS,EAAT,CAApC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAS,EAAT,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACD,GAHQ,EAGN,CAACF,MAAD,EAASE,QAAT,CAHM,CAAT;;AAKA,QAAMI,YAAY,GAAIC,UAAD,IAA2B;AAC9CN,IAAAA,SAAS,CAACM,UAAU,CAACC,KAAZ,CAAT;AACAL,IAAAA,WAAW,CAACI,UAAU,CAACE,KAAZ,CAAX,CAF8C,CAG9C;AACA;AACD,GALD,CAT0B,CAe1B;AACA;AACA;AACA;;;AACA,QAAMC,WAAW,GAAIC,SAAD,IAAuB;AACzC,WAAOC,KAAK,CACT,oFAAmFD,SAAU,EADpF,EAEVb,OAFU,CAAL,CAIJe,IAJI,CAICC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJb,EAKJF,IALI,CAKCC,QAAQ,IAAI;AAChB,aAAO;AACLhB,QAAAA,OAAO,EAAEgB,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBC,IAAD,IAAiB;AAC1C,iBAAO;AACLV,YAAAA,KAAK,EAAG,GAAEU,IAAI,CAACC,IAAK,IAAGD,IAAI,CAACE,WAAY,EADnC;AAELX,YAAAA,KAAK,EAAE,CAACS,IAAI,CAACG,QAAN,EAAgBH,IAAI,CAACI,SAArB;AAFF,WAAP;AAID,SALQ;AADJ,OAAP;AAQD,KAdI,EAeJC,KAfI,CAeEC,GAAG,IAAIpB,OAAO,CAACqB,KAAR,CAAcD,GAAd,CAfT,CAAP;AAgBD,GAjBD;;AAmBA,sBACE;AAAA,2BACE,QAAC,aAAD;AACE,MAAA,WAAW,EAAC,iBADd;AAEE,MAAA,eAAe,EAAE,GAFnB;AAGE,MAAA,KAAK,EAAExB,MAHT,CAIE;AAJF;AAKE,MAAA,QAAQ,EAAEM,YALZ,CAME;AANF;AAOE,MAAA,WAAW,EAAEI;AAPf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAnDM;;GAAMX,M;;KAAAA,M","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { AsyncPaginate } from 'react-select-async-paginate';\r\nimport { options } from '../../../../axios/geoApiOptions';\r\n\r\ninterface IMyOption {\r\n  label: string;\r\n  value: string;\r\n}\r\ninterface ICity {\r\n  name: string;\r\n  countryCode: string;\r\n  latitude: string;\r\n  longitude: string;\r\n}\r\n\r\nexport const Search = () => {\r\n  const [search, setSearch] = useState<string>('');\r\n  const [lacation, setlacation] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    console.log(search);\r\n    console.log(lacation);\r\n  }, [search, lacation]);\r\n\r\n  const handleChange = (optionData: IMyOption) => {\r\n    setSearch(optionData.label);\r\n    setlacation(optionData.value);\r\n    // console.log(optionData.value);\r\n    // console.log(optionData.label);\r\n  };\r\n  // const loadOptions = (\r\n  //     inputText: string,\r\n  //     callback: (options: OptionTypeBase[]) => void\r\n  // ): void =>\r\n  const loadOptions = (inputText: string) => {\r\n    return fetch(\r\n      `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n      options,\r\n    )\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        return {\r\n          options: response.data.map((city: ICity) => {\r\n            return {\r\n              label: `${city.name} ${city.countryCode}`,\r\n              value: [city.latitude, city.longitude],\r\n            };\r\n          }),\r\n        };\r\n      })\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AsyncPaginate\r\n        placeholder=\"Search the city\"\r\n        debounceTimeout={600}\r\n        value={search}\r\n        // @ts-ignore\r\n        onChange={handleChange}\r\n        // @ts-ignore\r\n        loadOptions={loadOptions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}