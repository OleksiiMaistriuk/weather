{"ast":null,"code":"// import { apiOptions } from '../../../../axios/geoApiOptions';\n// interface ICity {\n//   name: string;\n//   countryCode: string;\n//   latitude: string;\n//   longitude: string;\n// }\n// const loadOptions = async (inputText: string) => {\n//   return await fetch(\n//     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\n//     apiOptions,\n//   )\n//     .then(response => response.json())\n//     .then(response => ({\n//       options: response.data.map((city: ICity) => ({\n//         label: `${city.name} ${city.countryCode}`,\n//         value: { latitude: city.latitude, longitude: city.longitude },\n//       })),\n//     }))\n//     .catch(err => console.error(err));\n// };\n// export default loadOptions;\n// import { LoadOptions } from 'react-select-async-paginate';\n// import { apiOptions } from '../../../../axios/geoApiOptions';\n// interface ICity {\n//   name: string;\n//   countryCode: string;\n//   latitude: string;\n//   longitude: string;\n// }\n// const loadOptions: LoadOptions<any, { page: number }> = async (\n//   searchQuery: any,\n//   loadedOptions: any,\n//   { page }: any,\n// ) => {\n//   return await fetch(\n//     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\n//     apiOptions,\n//   )\n//     .then(response => response.json())\n//     .then(response => ({\n//       options: response.data.map((city: ICity) => ({\n//         label: `${city.name} ${city.countryCode}`,\n//         value: { latitude: city.latitude, longitude: city.longitude },\n//       })),\n//     }))\n//     .catch(err => console.error(err));\n// };\n// export default loadOptions;\nconst loadOptions = async (searchQuery, loadedOptions, _ref) => {\n  let {\n    page\n  } = _ref;\n  console.log(searchQuery);\n  const response = await fetch(`https://www.anapioficeandfire.com/api/houses?region=${regionName}&page=${page}&pageSize=10`);\n  const responseJSON = await response.json();\n  return {\n    options: responseJSON,\n    hasMore: responseJSON.length >= 1,\n    additional: {\n      page: searchQuery ? 2 : page + 1\n    }\n  };\n};\n\nexport default loadOptions;","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/loadOptions.ts"],"names":["loadOptions","searchQuery","loadedOptions","page","console","log","response","fetch","regionName","responseJSON","json","options","hasMore","length","additional"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,MAAMA,WAA+C,GAAG,OACtDC,WADsD,EAEtDC,aAFsD,WAInD;AAAA,MADH;AAAEC,IAAAA;AAAF,GACG;AACHC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AAEA,QAAMK,QAAQ,GAAG,MAAMC,KAAK,CACzB,uDAAsDC,UAAW,SAAQL,IAAK,cADrD,CAA5B;AAGA,QAAMM,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B;AAEA,SAAO;AACLC,IAAAA,OAAO,EAAEF,YADJ;AAELG,IAAAA,OAAO,EAAEH,YAAY,CAACI,MAAb,IAAuB,CAF3B;AAGLC,IAAAA,UAAU,EAAE;AACVX,MAAAA,IAAI,EAAEF,WAAW,GAAG,CAAH,GAAOE,IAAI,GAAG;AADrB;AAHP,GAAP;AAOD,CAnBD;;AAoBA,eAAeH,WAAf","sourcesContent":["// import { apiOptions } from '../../../../axios/geoApiOptions';\r\n// interface ICity {\r\n//   name: string;\r\n//   countryCode: string;\r\n//   latitude: string;\r\n//   longitude: string;\r\n// }\r\n// const loadOptions = async (inputText: string) => {\r\n//   return await fetch(\r\n//     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n//     apiOptions,\r\n//   )\r\n//     .then(response => response.json())\r\n//     .then(response => ({\r\n//       options: response.data.map((city: ICity) => ({\r\n//         label: `${city.name} ${city.countryCode}`,\r\n//         value: { latitude: city.latitude, longitude: city.longitude },\r\n//       })),\r\n//     }))\r\n//     .catch(err => console.error(err));\r\n// };\r\n// export default loadOptions;\r\n// import { LoadOptions } from 'react-select-async-paginate';\r\n// import { apiOptions } from '../../../../axios/geoApiOptions';\r\n// interface ICity {\r\n//   name: string;\r\n//   countryCode: string;\r\n//   latitude: string;\r\n//   longitude: string;\r\n// }\r\n// const loadOptions: LoadOptions<any, { page: number }> = async (\r\n//   searchQuery: any,\r\n//   loadedOptions: any,\r\n//   { page }: any,\r\n// ) => {\r\n//   return await fetch(\r\n//     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n//     apiOptions,\r\n//   )\r\n//     .then(response => response.json())\r\n//     .then(response => ({\r\n//       options: response.data.map((city: ICity) => ({\r\n//         label: `${city.name} ${city.countryCode}`,\r\n//         value: { latitude: city.latitude, longitude: city.longitude },\r\n//       })),\r\n//     }))\r\n//     .catch(err => console.error(err));\r\n// };\r\n// export default loadOptions;\r\n\r\nimport { LoadOptions } from 'react-select-async-paginate';\r\n\r\nconst loadOptions: LoadOptions<any, { page: number }> = async (\r\n  searchQuery: any,\r\n  loadedOptions: any,\r\n  { page }: any,\r\n) => {\r\n  console.log(searchQuery);\r\n\r\n  const response = await fetch(\r\n    `https://www.anapioficeandfire.com/api/houses?region=${regionName}&page=${page}&pageSize=10`,\r\n  );\r\n  const responseJSON = await response.json();\r\n\r\n  return {\r\n    options: responseJSON,\r\n    hasMore: responseJSON.length >= 1,\r\n    additional: {\r\n      page: searchQuery ? 2 : page + 1,\r\n    },\r\n  };\r\n};\r\nexport default loadOptions;\r\n"]},"metadata":{},"sourceType":"module"}