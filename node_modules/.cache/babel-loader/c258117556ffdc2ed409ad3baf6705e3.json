{"ast":null,"code":"// import { apiOptions } from '../../../../axios/geoApiOptions';\n// interface ICity {\n//   name: string;\n//   countryCode: string;\n//   latitude: string;\n//   longitude: string;\n// }\n// const loadOptions = async (inputText: string) => {\n//   return await fetch(\n//     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\n//     apiOptions,\n//   )\n//     .then(response => response.json())\n//     .then(response => ({\n//       options: response.data.map((city: ICity) => ({\n//         label: `${city.name} ${city.countryCode}`,\n//         value: { latitude: city.latitude, longitude: city.longitude },\n//       })),\n//     }))\n//     .catch(err => console.error(err));\n// };\n// export default loadOptions;\nimport { apiOptions } from '../../../../axios/geoApiOptions';\n\nconst loadOptions = async (searchQuery, loadedOptions, _ref) => {\n  let {\n    page\n  } = _ref;\n  return await fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`, apiOptions).then(response => response.json()).then(response => ({\n    options: response.data.map(city => ({\n      label: `${city.name} ${city.countryCode}`,\n      value: {\n        latitude: city.latitude,\n        longitude: city.longitude\n      }\n    }))\n  })).catch(err => console.error(err));\n};\n\nexport default loadOptions;","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/loadOptions.ts"],"names":["apiOptions","loadOptions","searchQuery","loadedOptions","page","fetch","inputText","then","response","json","options","data","map","city","label","name","countryCode","value","latitude","longitude","catch","err","console","error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,iCAA3B;;AAOC,MAAMC,WAA+C,GAAG,OACtDC,WADsD,EAEtDC,aAFsD,WAInD;AAAA,MADH;AAAEC,IAAAA;AAAF,GACG;AACH,SAAO,MAAMC,KAAK,CACf,oFAAmFC,SAAU,EAD9E,EAEhBN,UAFgB,CAAL,CAIVO,IAJU,CAILC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJP,EAKVF,IALU,CAKLC,QAAQ,KAAK;AACjBE,IAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAmBC,IAAD,KAAkB;AAC3CC,MAAAA,KAAK,EAAG,GAAED,IAAI,CAACE,IAAK,IAAGF,IAAI,CAACG,WAAY,EADG;AAE3CC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAEL,IAAI,CAACK,QAAjB;AAA2BC,QAAAA,SAAS,EAAEN,IAAI,CAACM;AAA3C;AAFoC,KAAlB,CAAlB;AADQ,GAAL,CALH,EAWVC,KAXU,CAWJC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAXH,CAAb;AAYD,CAjBD;;AAkBD,eAAepB,WAAf","sourcesContent":["// import { apiOptions } from '../../../../axios/geoApiOptions';\r\n// interface ICity {\r\n//   name: string;\r\n//   countryCode: string;\r\n//   latitude: string;\r\n//   longitude: string;\r\n// }\r\n// const loadOptions = async (inputText: string) => {\r\n//   return await fetch(\r\n//     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n//     apiOptions,\r\n//   )\r\n//     .then(response => response.json())\r\n//     .then(response => ({\r\n//       options: response.data.map((city: ICity) => ({\r\n//         label: `${city.name} ${city.countryCode}`,\r\n//         value: { latitude: city.latitude, longitude: city.longitude },\r\n//       })),\r\n//     }))\r\n//     .catch(err => console.error(err));\r\n// };\r\n// export default loadOptions;\r\nimport { apiOptions } from '../../../../axios/geoApiOptions';\r\ninterface ICity {\r\n  name: string;\r\n  countryCode: string;\r\n  latitude: string;\r\n  longitude: string;\r\n}\r\n const loadOptions: LoadOptions<any, { page: number }> = async (\r\n   searchQuery,\r\n   loadedOptions,\r\n   { page },\r\n ) => {\r\n   return await fetch(\r\n     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n     apiOptions,\r\n   )\r\n     .then(response => response.json())\r\n     .then(response => ({\r\n       options: response.data.map((city: ICity) => ({\r\n         label: `${city.name} ${city.countryCode}`,\r\n         value: { latitude: city.latitude, longitude: city.longitude },\r\n       })),\r\n     }))\r\n     .catch(err => console.error(err));\r\n };\r\nexport default loadOptions;\r\n"]},"metadata":{},"sourceType":"module"}