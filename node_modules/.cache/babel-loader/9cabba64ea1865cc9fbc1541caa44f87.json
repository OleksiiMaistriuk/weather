{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\apps\\\\weather\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\apps\\\\weather\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{apiOptions}from'axios/geoApiOptions';var loadOptions=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(inputText){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000&namePrefix=\".concat(inputText),apiOptions).then(function(response){return response.json();}).then(function(response){return{options:response.data.map(function(city){return{label:\"\".concat(city.name,\" \").concat(city.country),value:{latitude:city.latitude,longitude:city.longitude}};})};});case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},_callee);}));return function loadOptions(_x){return _ref.apply(this,arguments);};}();export default loadOptions;// import { GroupBase } from 'react-select';\n// import { LoadOptions } from 'react-select-async-paginate';\n// import { apiOptions } from '../../../../axios/geoApiOptions';\n// const loadOptions: LoadOptions<\n//   string,\n//   GroupBase<string>,\n//   any\n// > = async inputText => {\n//   return await fetch(\n//     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\n//     apiOptions,\n//   )\n//     .then(response => response.json())\n//     .then(response => ({\n//       options: response.data.map((city: ICity) => ({\n//         label: `${city.name} ${city.countryCode}`,\n//         value: { latitude: city.latitude, longitude: city.longitude },\n//       })),\n//     }))\n//     .catch(err => console.error(err));\n// };\n// export default loadOptions;","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/loadOptions.ts"],"names":["apiOptions","loadOptions","inputText","fetch","then","response","json","options","data","map","city","label","name","country","value","latitude","longitude"],"mappings":"4NAAA,OAASA,UAAT,KAA2B,qBAA3B,CAKA,GAAMC,CAAAA,WAIL,0FAAG,iBAAMC,SAAN,wIACWC,CAAAA,KAAK,yFACiED,SADjE,EAEhBF,UAFgB,CAAL,CAIVI,IAJU,CAIL,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EAJH,EAKVF,IALU,CAKL,SAAAC,QAAQ,CAAI,CAChB,MAAO,CACLE,OAAO,CAAEF,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAkB,SAACC,IAAD,QAAkB,CAC3CC,KAAK,WAAKD,IAAI,CAACE,IAAV,aAAkBF,IAAI,CAACG,OAAvB,CADsC,CAE3CC,KAAK,CAAE,CAAEC,QAAQ,CAAEL,IAAI,CAACK,QAAjB,CAA2BC,SAAS,CAAEN,IAAI,CAACM,SAA3C,CAFoC,CAAlB,EAAlB,CADJ,CAAP,CAMD,CAZU,CADX,6GAAH,kBAJKf,CAAAA,WAIL,4CAJD,CA+BA,cAAeA,CAAAA,WAAf,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { apiOptions } from 'axios/geoApiOptions';\r\nimport { GroupBase } from 'react-select';\r\nimport { LoadOptions } from 'react-select-async-paginate';\r\nimport { ICity, IMyOption } from 'store/types/types';\r\n\r\nconst loadOptions: LoadOptions<\r\n  IMyOption,\r\n  GroupBase<IMyOption>,\r\n  any\r\n> = async inputText => {\r\n  return await fetch(\r\n    `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000&namePrefix=${inputText}`,\r\n    apiOptions,\r\n  )\r\n    .then(response => response.json())\r\n    .then(response => {\r\n      return {\r\n        options: response.data.map((city: ICity) => ({\r\n          label: `${city.name} ${city.country}`,\r\n          value: { latitude: city.latitude, longitude: city.longitude },\r\n        })),\r\n      };\r\n    });\r\n\r\n  // const responseJSON = await response.json();\r\n\r\n  // console.log('responseJSON', responseJSON);\r\n  // return {\r\n  //   options: responseJSON.data\r\n  //     .map((city: ICity) => ({\r\n  //       label: `${city.name} ${city.country}`,\r\n  //       value: { latitude: city.latitude, longitude: city.longitude },\r\n  //     }))\r\n  //     .catch((err: any) => console.log(err)),\r\n  // };\r\n};\r\nexport default loadOptions;\r\n\r\n// import { GroupBase } from 'react-select';\r\n// import { LoadOptions } from 'react-select-async-paginate';\r\n// import { apiOptions } from '../../../../axios/geoApiOptions';\r\n\r\n// const loadOptions: LoadOptions<\r\n//   string,\r\n//   GroupBase<string>,\r\n//   any\r\n// > = async inputText => {\r\n//   return await fetch(\r\n//     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n//     apiOptions,\r\n//   )\r\n//     .then(response => response.json())\r\n//     .then(response => ({\r\n//       options: response.data.map((city: ICity) => ({\r\n//         label: `${city.name} ${city.countryCode}`,\r\n//         value: { latitude: city.latitude, longitude: city.longitude },\r\n//       })),\r\n//     }))\r\n//     .catch(err => console.error(err));\r\n// };\r\n// export default loadOptions;\r\n"]},"metadata":{},"sourceType":"module"}