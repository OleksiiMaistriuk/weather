{"ast":null,"code":"var _jsxFileName = \"C:\\\\apps\\\\weather\\\\src\\\\pages\\\\Home\\\\components\\\\Search\\\\Search.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { AsyncPaginate } from 'react-select-async-paginate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Search = () => {\n  _s();\n\n  const [search, setSearch] = useState('');\n  const [location, setLocation] = useState();\n  useEffect(() => {\n    console.log(search);\n    console.log(location);\n  }, [search, location]);\n\n  const handleChange = optionData => {\n    setSearch(optionData.label);\n    setLocation({\n      latitude: optionData.value.latitude,\n      longitude: optionData.value.longitude\n    });\n    return;\n  };\n\n  const loadOptions = (inputText, options) => {\n    return fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`, options).then(response => response.json()).then(response => {\n      return {\n        options: response.data.map(city => {\n          return {\n            label: `${city.name} ${city.countryCode}`,\n            value: {\n              latitude: city.latitude,\n              longitude: city.longitude\n            }\n          };\n        })\n      };\n    }).catch(err => console.error(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n      placeholder: \"Search the city\",\n      debounceTimeout: 600,\n      value: search,\n      onChange: handleChange,\n      loadOptions: loadOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"ljFO52hWdrHWdX42pHk+9w57IWs=\");\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/Search.tsx"],"names":["useEffect","useState","AsyncPaginate","Search","search","setSearch","location","setLocation","console","log","handleChange","optionData","label","latitude","value","longitude","loadOptions","inputText","options","fetch","then","response","json","data","map","city","name","countryCode","catch","err","error"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,6BAA9B;;AAiBA,OAAO,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAS,EAAT,CAApC;AAEA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,EAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACD,GAHQ,EAGN,CAACF,MAAD,EAASE,QAAT,CAHM,CAAT;;AAKA,QAAMI,YAAY,GAAIC,UAAD,IAA2B;AAC9CN,IAAAA,SAAS,CAACM,UAAU,CAACC,KAAZ,CAAT;AACAL,IAAAA,WAAW,CAAC;AACVM,MAAAA,QAAQ,EAAEF,UAAU,CAACG,KAAX,CAAiBD,QADjB;AAEVE,MAAAA,SAAS,EAAEJ,UAAU,CAACG,KAAX,CAAiBC;AAFlB,KAAD,CAAX;AAIA;AACD,GAPD;;AASA,QAAMC,WAAW,GAAG,CAACC,SAAD,EAAoBC,OAApB,KAA6C;AAC/D,WAAOC,KAAK,CACT,oFAAmFF,SAAU,EADpF,EAEVC,OAFU,CAAL,CAIJE,IAJI,CAICC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJb,EAKJF,IALI,CAKCC,QAAQ,IAAI;AAChB,aAAO;AACLH,QAAAA,OAAO,EAAEG,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBC,IAAD,IAAiB;AAC1C,iBAAO;AACLb,YAAAA,KAAK,EAAG,GAAEa,IAAI,CAACC,IAAK,IAAGD,IAAI,CAACE,WAAY,EADnC;AAELb,YAAAA,KAAK,EAAE;AAAED,cAAAA,QAAQ,EAAEY,IAAI,CAACZ,QAAjB;AAA2BE,cAAAA,SAAS,EAAEU,IAAI,CAACV;AAA3C;AAFF,WAAP;AAID,SALQ;AADJ,OAAP;AAQD,KAdI,EAeJa,KAfI,CAeEC,GAAG,IAAIrB,OAAO,CAACsB,KAAR,CAAcD,GAAd,CAfT,CAAP;AAgBD,GAjBD;;AAmBA,sBACE;AAAA,2BACE,QAAC,aAAD;AACE,MAAA,WAAW,EAAC,iBADd;AAEE,MAAA,eAAe,EAAE,GAFnB;AAGE,MAAA,KAAK,EAAEzB,MAHT;AAIE,MAAA,QAAQ,EAAEM,YAJZ;AAKE,MAAA,WAAW,EAAEM;AALf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAjDM;;GAAMb,M;;KAAAA,M","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { AsyncPaginate } from 'react-select-async-paginate';\r\n\r\ntype Location = {\r\n  latitude: string;\r\n  longitude: string;\r\n};\r\ninterface IMyOption {\r\n  label: string;\r\n  value: Location;\r\n}\r\ninterface ICity {\r\n  name: string;\r\n  countryCode: string;\r\n  latitude: string;\r\n  longitude: string;\r\n}\r\n\r\nexport const Search = () => {\r\n  const [search, setSearch] = useState<string>('');\r\n\r\n  const [location, setLocation] = useState<Location>();\r\n\r\n  useEffect(() => {\r\n    console.log(search);\r\n    console.log(location);\r\n  }, [search, location]);\r\n\r\n  const handleChange = (optionData: IMyOption) => {\r\n    setSearch(optionData.label);\r\n    setLocation({\r\n      latitude: optionData.value.latitude,\r\n      longitude: optionData.value.longitude,\r\n    });\r\n    return;\r\n  };\r\n\r\n  const loadOptions = (inputText: string, options: RequestInit) => {\r\n    return fetch(\r\n      `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n      options,\r\n    )\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        return {\r\n          options: response.data.map((city: ICity) => {\r\n            return {\r\n              label: `${city.name} ${city.countryCode}`,\r\n              value: { latitude: city.latitude, longitude: city.longitude },\r\n            };\r\n          }),\r\n        };\r\n      })\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AsyncPaginate\r\n        placeholder=\"Search the city\"\r\n        debounceTimeout={600}\r\n        value={search}\r\n        onChange={handleChange}\r\n        loadOptions={loadOptions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}