{"ast":null,"code":"var _jsxFileName = \"C:\\\\apps\\\\weather\\\\src\\\\pages\\\\Home\\\\components\\\\Search\\\\Search.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { AsyncPaginate } from 'react-select-async-paginate';\nimport { options } from '../../../../axios/geoApiOptions';\nimport { fetchCurrentWeather } from '../../../../store/thunks/fetchCurrentWeather';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Search = _ref => {\n  _s();\n\n  let {\n    onSearchChange\n  } = _ref;\n  const [search, setSearch] = useState(Object);\n\n  const handleOnChange = optionData => {\n    setSearch(optionData);\n    onSearchChange(optionData);\n  };\n\n  useEffect(() => {\n    const {\n      latitude,\n      longitude\n    } = search;\n    dispatch(fetchCurrentWeather(`${latitude} ${longitude}`));\n    console.log(search);\n  }, [search]);\n\n  const loadOptions = inputValue => {\n    return fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=10000&namePrefix=${inputValue}`, options).then(response => response.json()).then(response => {\n      return {\n        options: response.data.map(city => {\n          return {\n            latitude: city.latitude,\n            longitude: city.longitude,\n            name: `${city.name} `,\n            countryCode: `${city.countryCode}`\n          };\n        })\n      };\n    }).catch(err => console.error(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n      placeholder: \"Search the city\",\n      debounceTimeout: 600,\n      value: search // @ts-ignore\n      ,\n      onChange: handleOnChange // @ts-ignore\n      ,\n      loadOptions: loadOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"5nhoNA9FwJq56LkhMRBs1WYDmGI=\");\n\n_c = Search;\n\nfunction dispatch(arg0) {\n  throw new Error('Function not implemented.');\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/Search.tsx"],"names":["useEffect","useState","AsyncPaginate","options","fetchCurrentWeather","Search","onSearchChange","search","setSearch","Object","handleOnChange","optionData","latitude","longitude","dispatch","console","log","loadOptions","inputValue","fetch","then","response","json","data","map","city","name","countryCode","catch","err","error","arg0","Error"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,OAAT,QAAwB,iCAAxB;AACA,SAASC,mBAAT,QAAoC,8CAApC;;AASA,OAAO,MAAMC,MAAM,GAAG,QAA6B;AAAA;;AAAA,MAA5B;AAAEC,IAAAA;AAAF,GAA4B;AACjD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAACQ,MAAD,CAApC;;AAEA,QAAMC,cAAc,GAAIC,UAAD,IAAwB;AAC7CH,IAAAA,SAAS,CAACG,UAAD,CAAT;AACAL,IAAAA,cAAc,CAACK,UAAD,CAAd;AACD,GAHD;;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEY,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0BN,MAAhC;AAEAO,IAAAA,QAAQ,CAACV,mBAAmB,CAAE,GAAEQ,QAAS,IAAGC,SAAU,EAA1B,CAApB,CAAR;AAEAE,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACD,GANQ,EAMN,CAACA,MAAD,CANM,CAAT;;AAQA,QAAMU,WAAW,GAAIC,UAAD,IAAwB;AAC1C,WAAOC,KAAK,CACT,kFAAiFD,UAAW,EADnF,EAEVf,OAFU,CAAL,CAIJiB,IAJI,CAICC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJb,EAKJF,IALI,CAKCC,QAAQ,IAAI;AAChB,aAAO;AACLlB,QAAAA,OAAO,EAAEkB,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBC,IAAD,IAAgB;AACzC,iBAAO;AACLb,YAAAA,QAAQ,EAAEa,IAAI,CAACb,QADV;AAELC,YAAAA,SAAS,EAAEY,IAAI,CAACZ,SAFX;AAGLa,YAAAA,IAAI,EAAG,GAAED,IAAI,CAACC,IAAK,GAHd;AAILC,YAAAA,WAAW,EAAG,GAAEF,IAAI,CAACE,WAAY;AAJ5B,WAAP;AAMD,SAPQ;AADJ,OAAP;AAUD,KAhBI,EAiBJC,KAjBI,CAiBEC,GAAG,IAAId,OAAO,CAACe,KAAR,CAAcD,GAAd,CAjBT,CAAP;AAkBD,GAnBD;;AAqBA,sBACE;AAAA,2BACE,QAAC,aAAD;AACE,MAAA,WAAW,EAAC,iBADd;AAEE,MAAA,eAAe,EAAE,GAFnB;AAGE,MAAA,KAAK,EAAEtB,MAHT,CAIE;AAJF;AAKE,MAAA,QAAQ,EAAEG,cALZ,CAME;AANF;AAOE,MAAA,WAAW,EAAEO;AAPf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAjDM;;GAAMZ,M;;KAAAA,M;;AAkDb,SAASS,QAAT,CAAkBiB,IAAlB,EAA6B;AAC3B,QAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { AsyncPaginate } from 'react-select-async-paginate';\r\nimport { options } from '../../../../axios/geoApiOptions';\r\nimport { fetchCurrentWeather } from '../../../../store/thunks/fetchCurrentWeather';\r\n\r\ntype City = {\r\n  countryCode: String;\r\n  name: String;\r\n  longitude: String;\r\n  latitude: String;\r\n};\r\n\r\nexport const Search = ({ onSearchChange }: any) => {\r\n  const [search, setSearch] = useState(Object);\r\n\r\n  const handleOnChange = (optionData: string) => {\r\n    setSearch(optionData);\r\n    onSearchChange(optionData);\r\n  };\r\n  useEffect(() => {\r\n    const { latitude, longitude } = search;\r\n\r\n    dispatch(fetchCurrentWeather(`${latitude} ${longitude}`));\r\n\r\n    console.log(search);\r\n  }, [search]);\r\n\r\n  const loadOptions = (inputValue: object) => {\r\n    return fetch(\r\n      `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=10000&namePrefix=${inputValue}`,\r\n      options,\r\n    )\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        return {\r\n          options: response.data.map((city: City) => {\r\n            return {\r\n              latitude: city.latitude,\r\n              longitude: city.longitude,\r\n              name: `${city.name} `,\r\n              countryCode: `${city.countryCode}`,\r\n            };\r\n          }),\r\n        };\r\n      })\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AsyncPaginate\r\n        placeholder=\"Search the city\"\r\n        debounceTimeout={600}\r\n        value={search}\r\n        // @ts-ignore\r\n        onChange={handleOnChange}\r\n        // @ts-ignore\r\n        loadOptions={loadOptions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nfunction dispatch(arg0: any) {\r\n  throw new Error('Function not implemented.');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}