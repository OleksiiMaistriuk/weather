{"ast":null,"code":"import { apiOptions } from '../../../../axios/geoApiOptions';\n\nconst loadOptions = async inputText => {\n  return await fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`, apiOptions).then(response => response.json()).then(response => ({\n    options: response.data.map(city => ({\n      label: `${city.name} ${city.countryCode}`,\n      value: {\n        latitude: city.latitude,\n        longitude: city.longitude\n      }\n    }))\n  })).catch(err => console.error(err));\n};\n\nexport default loadOptions; // import { LoadOptions } from 'react-select-async-paginate';\n// const loadOptions: LoadOptions<any, any, any> = async (inputText: string) => {\n//   const response = await fetch(\n//     `https://www.anapioficeandfire.com/api/houses?region=${inputText}`,\n//   );\n//   const responseJSON = await response.json();\n//   return {\n//     options: responseJSON,\n//     hasMore: responseJSON.length >= 1,\n//     additional: {},\n//   };\n// };\n// export default loadOptions;","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/loadOptions.ts"],"names":["apiOptions","loadOptions","inputText","fetch","then","response","json","options","data","map","city","label","name","countryCode","value","latitude","longitude","catch","err","console","error"],"mappings":"AACA,SAASA,UAAT,QAA2B,iCAA3B;;AAOA,MAAMC,WAAuC,GAAG,MAAOC,SAAP,IAA6B;AAC3E,SAAO,MAAMC,KAAK,CACf,oFAAmFD,SAAU,EAD9E,EAEhBF,UAFgB,CAAL,CAIVI,IAJU,CAILC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJP,EAKVF,IALU,CAKLC,QAAQ,KAAK;AACjBE,IAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAmBC,IAAD,KAAkB;AAC3CC,MAAAA,KAAK,EAAG,GAAED,IAAI,CAACE,IAAK,IAAGF,IAAI,CAACG,WAAY,EADG;AAE3CC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAEL,IAAI,CAACK,QAAjB;AAA2BC,QAAAA,SAAS,EAAEN,IAAI,CAACM;AAA3C;AAFoC,KAAlB,CAAlB;AADQ,GAAL,CALH,EAWVC,KAXU,CAWJC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAXH,CAAb;AAYD,CAbD;;AAcA,eAAejB,WAAf,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { LoadOptions } from 'react-select-async-paginate';\r\nimport { apiOptions } from '../../../../axios/geoApiOptions';\r\ninterface ICity {\r\n  name: string;\r\n  countryCode: string;\r\n  latitude: string;\r\n  longitude: string;\r\n}\r\nconst loadOptions: LoadOptions<any, any, any> = async (inputText: string) => {\r\n  return await fetch(\r\n    `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n    apiOptions,\r\n  )\r\n    .then(response => response.json())\r\n    .then(response => ({\r\n      options: response.data.map((city: ICity) => ({\r\n        label: `${city.name} ${city.countryCode}`,\r\n        value: { latitude: city.latitude, longitude: city.longitude },\r\n      })),\r\n    }))\r\n    .catch(err => console.error(err));\r\n};\r\nexport default loadOptions;\r\n\r\n// import { LoadOptions } from 'react-select-async-paginate';\r\n\r\n// const loadOptions: LoadOptions<any, any, any> = async (inputText: string) => {\r\n//   const response = await fetch(\r\n//     `https://www.anapioficeandfire.com/api/houses?region=${inputText}`,\r\n//   );\r\n//   const responseJSON = await response.json();\r\n\r\n//   return {\r\n//     options: responseJSON,\r\n//     hasMore: responseJSON.length >= 1,\r\n//     additional: {},\r\n//   };\r\n// };\r\n// export default loadOptions;\r\n"]},"metadata":{},"sourceType":"module"}