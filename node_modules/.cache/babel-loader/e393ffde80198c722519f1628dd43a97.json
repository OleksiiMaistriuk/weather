{"ast":null,"code":"var _jsxFileName = \"C:\\\\apps\\\\weather\\\\src\\\\pages\\\\Home\\\\components\\\\Search\\\\Search.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { AsyncPaginate } from 'react-select-async-paginate';\nimport { options } from '../../../../axios/geoApiOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Search = () => {\n  _s();\n\n  const [search, setSearch] = useState(null);\n  const [location, setLocation] = useState();\n  const [value, onChange] = useState(null);\n  useEffect(() => {\n    console.log(search);\n    console.log(location);\n  }, [search, location]); // Type '(optionData: IMyOption) => void' is not assignable to type '(newValue: SingleValue<string>, actionMeta: ActionMeta<string>) => void'.\n\n  const handleChange = optionData => {\n    setSearch(optionData.label);\n    setLocation({\n      latitude: optionData.value.latitude,\n      longitude: optionData.value.longitude\n    });\n    return;\n  };\n\n  const shouldLoadMore = (scrollHeight, clientHeight, scrollTop) => {\n    const bottomBorder = (scrollHeight - clientHeight) / 2;\n    return bottomBorder < scrollTop;\n  };\n\n  const loadOptions = async inputText => {\n    return await fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`, options).then(response => response.json()).then(response => ({\n      options: response.data.map(city => ({\n        label: `${city.name} ${city.countryCode}`,\n        value: {\n          latitude: city.latitude,\n          longitude: city.longitude\n        }\n      }))\n    })).catch(err => console.error(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n      placeholder: \"Search the city\",\n      debounceTimeout: 600,\n      value: value,\n      shouldLoadMore: shouldLoadMore,\n      onChange: onChange // @ts-ignore\n      ,\n      loadOptions: loadOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"lgYNl/UhKgUcX+pxvToWayEkztk=\");\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/Search.tsx"],"names":["useEffect","useState","AsyncPaginate","options","Search","search","setSearch","location","setLocation","value","onChange","console","log","handleChange","optionData","label","latitude","longitude","shouldLoadMore","scrollHeight","clientHeight","scrollTop","bottomBorder","loadOptions","inputText","fetch","then","response","json","data","map","city","name","countryCode","catch","err","error"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,OAAT,QAAwB,iCAAxB;;AAiBA,OAAO,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAgB,IAAhB,CAApC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,EAAxC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAgB,IAAhB,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACD,GAHQ,EAGN,CAACF,MAAD,EAASE,QAAT,CAHM,CAAT,CAL0B,CAS1B;;AACA,QAAMM,YAAY,GAAIC,UAAD,IAA2B;AAC9CR,IAAAA,SAAS,CAACQ,UAAU,CAACC,KAAZ,CAAT;AACAP,IAAAA,WAAW,CAAC;AACVQ,MAAAA,QAAQ,EAAEF,UAAU,CAACL,KAAX,CAAiBO,QADjB;AAEVC,MAAAA,SAAS,EAAEH,UAAU,CAACL,KAAX,CAAiBQ;AAFlB,KAAD,CAAX;AAIA;AACD,GAPD;;AASA,QAAMC,cAAc,GAAG,CACrBC,YADqB,EAErBC,YAFqB,EAGrBC,SAHqB,KAIlB;AACH,UAAMC,YAAY,GAAG,CAACH,YAAY,GAAGC,YAAhB,IAAgC,CAArD;AAEA,WAAOE,YAAY,GAAGD,SAAtB;AACD,GARD;;AAUA,QAAME,WAAW,GAAG,MAAOC,SAAP,IAA6B;AAC/C,WAAO,MAAMC,KAAK,CACf,oFAAmFD,SAAU,EAD9E,EAEhBrB,OAFgB,CAAL,CAIVuB,IAJU,CAILC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJP,EAKVF,IALU,CAKLC,QAAQ,KAAK;AACjBxB,MAAAA,OAAO,EAAEwB,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBC,IAAD,KAAkB;AAC3ChB,QAAAA,KAAK,EAAG,GAAEgB,IAAI,CAACC,IAAK,IAAGD,IAAI,CAACE,WAAY,EADG;AAE3CxB,QAAAA,KAAK,EAAE;AAAEO,UAAAA,QAAQ,EAAEe,IAAI,CAACf,QAAjB;AAA2BC,UAAAA,SAAS,EAAEc,IAAI,CAACd;AAA3C;AAFoC,OAAlB,CAAlB;AADQ,KAAL,CALH,EAWViB,KAXU,CAWJC,GAAG,IAAIxB,OAAO,CAACyB,KAAR,CAAcD,GAAd,CAXH,CAAb;AAYD,GAbD;;AAeA,sBACE;AAAA,2BACE,QAAC,aAAD;AACE,MAAA,WAAW,EAAC,iBADd;AAEE,MAAA,eAAe,EAAE,GAFnB;AAGE,MAAA,KAAK,EAAE1B,KAHT;AAIE,MAAA,cAAc,EAAES,cAJlB;AAKE,MAAA,QAAQ,EAAER,QALZ,CAME;AANF;AAOE,MAAA,WAAW,EAAEa;AAPf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAzDM;;GAAMnB,M;;KAAAA,M","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { AsyncPaginate } from 'react-select-async-paginate';\r\nimport { options } from '../../../../axios/geoApiOptions';\r\n\r\ntype Location = {\r\n  latitude: string;\r\n  longitude: string;\r\n};\r\ninterface IMyOption {\r\n  label: string;\r\n  value: Location;\r\n}\r\ninterface ICity {\r\n  name: string;\r\n  countryCode: string;\r\n  latitude: string;\r\n  longitude: string;\r\n}\r\n\r\nexport const Search = () => {\r\n  const [search, setSearch] = useState<string | null>(null);\r\n  const [location, setLocation] = useState<Location>();\r\n  const [value, onChange] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    console.log(search);\r\n    console.log(location);\r\n  }, [search, location]);\r\n  // Type '(optionData: IMyOption) => void' is not assignable to type '(newValue: SingleValue<string>, actionMeta: ActionMeta<string>) => void'.\r\n  const handleChange = (optionData: IMyOption) => {\r\n    setSearch(optionData.label);\r\n    setLocation({\r\n      latitude: optionData.value.latitude,\r\n      longitude: optionData.value.longitude,\r\n    });\r\n    return;\r\n  };\r\n\r\n  const shouldLoadMore = (\r\n    scrollHeight: number,\r\n    clientHeight: number,\r\n    scrollTop: number,\r\n  ) => {\r\n    const bottomBorder = (scrollHeight - clientHeight) / 2;\r\n\r\n    return bottomBorder < scrollTop;\r\n  };\r\n\r\n  const loadOptions = async (inputText: string) => {\r\n    return await fetch(\r\n      `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n      options,\r\n    )\r\n      .then(response => response.json())\r\n      .then(response => ({\r\n        options: response.data.map((city: ICity) => ({\r\n          label: `${city.name} ${city.countryCode}`,\r\n          value: { latitude: city.latitude, longitude: city.longitude },\r\n        })),\r\n      }))\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AsyncPaginate\r\n        placeholder=\"Search the city\"\r\n        debounceTimeout={600}\r\n        value={value}\r\n        shouldLoadMore={shouldLoadMore}\r\n        onChange={onChange}\r\n        // @ts-ignore\r\n        loadOptions={loadOptions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}