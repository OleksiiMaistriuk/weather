{"ast":null,"code":"const options = [];\n\nfor (let i = 0; i < 50; ++i) {\n  options.push({\n    value: i + 1,\n    label: `Option ${i + 1}`\n  });\n}\n\nconst sleep = ms => new Promise(resolve => {\n  setTimeout(() => {\n    resolve();\n  }, ms);\n});\n\nconst loadOptions = async (search, prevOptions) => {\n  await sleep(1000);\n  let filteredOptions;\n\n  if (!search) {\n    filteredOptions = options;\n  } else {\n    const searchLower = search.toLowerCase();\n    filteredOptions = options.filter(_ref => {\n      let {\n        label\n      } = _ref;\n      return label.toLowerCase().includes(searchLower);\n    });\n  }\n\n  const hasMore = filteredOptions.length > prevOptions.length + 10;\n  const slicedOptions = filteredOptions.slice(prevOptions.length, prevOptions.length + 10);\n  return {\n    options: slicedOptions,\n    hasMore\n  };\n};\n\nexport default loadOptions;","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/loadOptions.tsx"],"names":["options","i","push","value","label","sleep","ms","Promise","resolve","setTimeout","loadOptions","search","prevOptions","filteredOptions","searchLower","toLowerCase","filter","includes","hasMore","length","slicedOptions","slice"],"mappings":"AAAA,MAAMA,OAA2C,GAAG,EAApD;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwB,EAAEA,CAA1B,EAA6B;AAC3BD,EAAAA,OAAO,CAACE,IAAR,CAAa;AACXC,IAAAA,KAAK,EAAEF,CAAC,GAAG,CADA;AAEXG,IAAAA,KAAK,EAAG,UAASH,CAAC,GAAG,CAAE;AAFZ,GAAb;AAID;;AAED,MAAMI,KAAK,GAAIC,EAAD,IACZ,IAAIC,OAAJ,CAAaC,OAAD,IAAkB;AAC5BC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,OAAO;AACR,GAFS,EAEPF,EAFO,CAAV;AAGD,CAJD,CADF;;AAOA,MAAMI,WAAW,GAAG,OAAOC,MAAP,EAAuBC,WAAvB,KAA+C;AACjE,QAAMP,KAAK,CAAC,IAAD,CAAX;AAEA,MAAIQ,eAAJ;;AACA,MAAI,CAACF,MAAL,EAAa;AACXE,IAAAA,eAAe,GAAGb,OAAlB;AACD,GAFD,MAEO;AACL,UAAMc,WAAW,GAAGH,MAAM,CAACI,WAAP,EAApB;AAEAF,IAAAA,eAAe,GAAGb,OAAO,CAACgB,MAAR,CAAe;AAAA,UAAC;AAAEZ,QAAAA;AAAF,OAAD;AAAA,aAC/BA,KAAK,CAACW,WAAN,GAAoBE,QAApB,CAA6BH,WAA7B,CAD+B;AAAA,KAAf,CAAlB;AAGD;;AAED,QAAMI,OAAO,GAAGL,eAAe,CAACM,MAAhB,GAAyBP,WAAW,CAACO,MAAZ,GAAqB,EAA9D;AACA,QAAMC,aAAa,GAAGP,eAAe,CAACQ,KAAhB,CACpBT,WAAW,CAACO,MADQ,EAEpBP,WAAW,CAACO,MAAZ,GAAqB,EAFD,CAAtB;AAKA,SAAO;AACLnB,IAAAA,OAAO,EAAEoB,aADJ;AAELF,IAAAA;AAFK,GAAP;AAID,CAxBD;;AA0BA,eAAeR,WAAf","sourcesContent":["const options: { label: string; value: number }[] = [];\nfor (let i = 0; i < 50; ++i) {\n  options.push({\n    value: i + 1,\n    label: `Option ${i + 1}`,\n  });\n}\n\nconst sleep = (ms: any) =>\n  new Promise((resolve: any) => {\n    setTimeout(() => {\n      resolve();\n    }, ms);\n  });\n\nconst loadOptions = async (search: String, prevOptions: String) => {\n  await sleep(1000);\n\n  let filteredOptions;\n  if (!search) {\n    filteredOptions = options;\n  } else {\n    const searchLower = search.toLowerCase();\n\n    filteredOptions = options.filter(({ label }) =>\n      label.toLowerCase().includes(searchLower),\n    );\n  }\n\n  const hasMore = filteredOptions.length > prevOptions.length + 10;\n  const slicedOptions = filteredOptions.slice(\n    prevOptions.length,\n    prevOptions.length + 10,\n  );\n\n  return {\n    options: slicedOptions,\n    hasMore,\n  };\n};\n\nexport default loadOptions;\n"]},"metadata":{},"sourceType":"module"}