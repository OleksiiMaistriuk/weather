{"ast":null,"code":"var _jsxFileName = \"C:\\\\apps\\\\weather\\\\src\\\\pages\\\\Home\\\\components\\\\Search\\\\Search.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { AsyncPaginate } from 'react-select-async-paginate';\nimport { apiOptions } from '../../../../axios/geoApiOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Search = () => {\n  _s();\n\n  // const [search, setSearch] = useState<string | null>(null);\n  // const [location, setLocation] = useState<Location>();\n  const [searchData, onSearchData] = useState(null);\n  useEffect(() => {\n    // console.log(search);\n    console.log(searchData);\n  }, [searchData]); // Type '(optionData: IMyOption) => void' is not assignable to type '(newValue: SingleValue<string>, actionMeta: ActionMeta<string>) => void'.\n  // const handleChange = (optionData: IMyOption) => {\n  //   setSearch(optionData.label);\n  //   setLocation({\n  //     latitude: optionData.value.latitude,\n  //     longitude: optionData.value.longitude,\n  //   });\n  //   return;\n  // };\n\n  const shouldLoadMore = (scrollHeight, clientHeight, scrollTop) => {\n    const bottomBorder = (scrollHeight - clientHeight) / 2;\n    return bottomBorder < scrollTop;\n  };\n\n  const loadOptions = async (search, prevOptions) => {\n    const options = [];\n\n    for (let i = 0; i < 50; ++i) {\n      options.push({\n        value: i + 1,\n        label: `Option ${i + 1}`\n      });\n    }\n\n    let filteredOptions;\n\n    if (!search) {\n      filteredOptions = options;\n    }\n\n    {\n      const searchLower = search.toLowerCase();\n      filteredOptions = options.filter(_ref => {\n        let {\n          label\n        } = _ref;\n        return label.toLowerCase().includes(searchLower);\n      });\n    }\n    const hasMore = filteredOptions.length > prevOptions.length + 10;\n    return await fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${search}`, apiOptions).then(response => response.json()).then(response => ({\n      options: response.data.map(city => ({\n        label: `${city.name} ${city.countryCode}`,\n        value: {\n          latitude: city.latitude,\n          longitude: city.longitude\n        }\n      }))\n    })).catch(err => console.error(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n      placeholder: \"Search the city\",\n      debounceTimeout: 600,\n      value: searchData,\n      shouldLoadMore: shouldLoadMore,\n      onChange: onSearchData,\n      loadOptions: loadOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"lruYANY8/4lLefurT8MhkumRRxc=\");\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/Search.tsx"],"names":["useEffect","useState","AsyncPaginate","apiOptions","Search","searchData","onSearchData","console","log","shouldLoadMore","scrollHeight","clientHeight","scrollTop","bottomBorder","loadOptions","search","prevOptions","options","i","push","value","label","filteredOptions","searchLower","toLowerCase","filter","includes","hasMore","length","fetch","then","response","json","data","map","city","name","countryCode","latitude","longitude","catch","err","error"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,UAAT,QAA2B,iCAA3B;;AAiBA,OAAO,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAC1B;AACA;AACA,QAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BL,QAAQ,CAAmB,IAAnB,CAA3C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACD,GAHQ,EAGN,CAACA,UAAD,CAHM,CAAT,CAL0B,CAS1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMI,cAAc,GAAG,CACrBC,YADqB,EAErBC,YAFqB,EAGrBC,SAHqB,KAIlB;AACH,UAAMC,YAAY,GAAG,CAACH,YAAY,GAAGC,YAAhB,IAAgC,CAArD;AACA,WAAOE,YAAY,GAAGD,SAAtB;AACD,GAPD;;AASA,QAAME,WAAW,GAAG,OAAOC,MAAP,EAAuBC,WAAvB,KAA2C;AAC7D,UAAMC,OAAO,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwB,EAAEA,CAA1B,EAA6B;AAC3BD,MAAAA,OAAO,CAACE,IAAR,CAAa;AACXC,QAAAA,KAAK,EAAEF,CAAC,GAAG,CADA;AAEXG,QAAAA,KAAK,EAAG,UAASH,CAAC,GAAG,CAAE;AAFZ,OAAb;AAID;;AACD,QAAII,eAAJ;;AACA,QAAI,CAACP,MAAL,EAAa;AACXO,MAAAA,eAAe,GAAGL,OAAlB;AACD;;AACD;AACE,YAAMM,WAAW,GAAGR,MAAM,CAACS,WAAP,EAApB;AAEAF,MAAAA,eAAe,GAAGL,OAAO,CAACQ,MAAR,CAAe;AAAA,YAAC;AAAEJ,UAAAA;AAAF,SAAD;AAAA,eAC/BA,KAAK,CAACG,WAAN,GAAoBE,QAApB,CAA6BH,WAA7B,CAD+B;AAAA,OAAf,CAAlB;AAGD;AACD,UAAMI,OAAO,GAAGL,eAAe,CAACM,MAAhB,GAAyBZ,WAAW,CAACY,MAAZ,GAAqB,EAA9D;AAEA,WAAO,MAAMC,KAAK,CACf,oFAAmFd,MAAO,EAD3E,EAEhBZ,UAFgB,CAAL,CAIV2B,IAJU,CAILC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJP,EAKVF,IALU,CAKLC,QAAQ,KAAK;AACjBd,MAAAA,OAAO,EAAEc,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBC,IAAD,KAAkB;AAC3Cd,QAAAA,KAAK,EAAG,GAAEc,IAAI,CAACC,IAAK,IAAGD,IAAI,CAACE,WAAY,EADG;AAE3CjB,QAAAA,KAAK,EAAE;AAAEkB,UAAAA,QAAQ,EAAEH,IAAI,CAACG,QAAjB;AAA2BC,UAAAA,SAAS,EAAEJ,IAAI,CAACI;AAA3C;AAFoC,OAAlB,CAAlB;AADQ,KAAL,CALH,EAWVC,KAXU,CAWJC,GAAG,IAAIlC,OAAO,CAACmC,KAAR,CAAcD,GAAd,CAXH,CAAb;AAYD,GAjCD;;AAmCA,sBACE;AAAA,2BACE,QAAC,aAAD;AACE,MAAA,WAAW,EAAC,iBADd;AAEE,MAAA,eAAe,EAAE,GAFnB;AAGE,MAAA,KAAK,EAAEpC,UAHT;AAIE,MAAA,cAAc,EAAEI,cAJlB;AAKE,MAAA,QAAQ,EAAEH,YALZ;AAME,MAAA,WAAW,EAAEQ;AANf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA3EM;;GAAMV,M;;KAAAA,M","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { AsyncPaginate } from 'react-select-async-paginate';\r\nimport { apiOptions } from '../../../../axios/geoApiOptions';\r\n\r\ntype Location = {\r\n  latitude: string;\r\n  longitude: string;\r\n};\r\ninterface IMyOption {\r\n  label: string;\r\n  value: Location;\r\n}\r\ninterface ICity {\r\n  name: string;\r\n  countryCode: string;\r\n  latitude: string;\r\n  longitude: string;\r\n}\r\n\r\nexport const Search = () => {\r\n  // const [search, setSearch] = useState<string | null>(null);\r\n  // const [location, setLocation] = useState<Location>();\r\n  const [searchData, onSearchData] = useState<IMyOption | null>(null);\r\n\r\n  useEffect(() => {\r\n    // console.log(search);\r\n    console.log(searchData);\r\n  }, [searchData]);\r\n  // Type '(optionData: IMyOption) => void' is not assignable to type '(newValue: SingleValue<string>, actionMeta: ActionMeta<string>) => void'.\r\n  // const handleChange = (optionData: IMyOption) => {\r\n  //   setSearch(optionData.label);\r\n  //   setLocation({\r\n  //     latitude: optionData.value.latitude,\r\n  //     longitude: optionData.value.longitude,\r\n  //   });\r\n  //   return;\r\n  // };\r\n\r\n  const shouldLoadMore = (\r\n    scrollHeight: number,\r\n    clientHeight: number,\r\n    scrollTop: number,\r\n  ) => {\r\n    const bottomBorder = (scrollHeight - clientHeight) / 2;\r\n    return bottomBorder < scrollTop;\r\n  };\r\n\r\n  const loadOptions = async (search: string, prevOptions: []) => {\r\n    const options = [];\r\n    for (let i = 0; i < 50; ++i) {\r\n      options.push({\r\n        value: i + 1,\r\n        label: `Option ${i + 1}`,\r\n      });\r\n    }\r\n    let filteredOptions;\r\n    if (!search) {\r\n      filteredOptions = options;\r\n    }\r\n    {\r\n      const searchLower = search.toLowerCase();\r\n\r\n      filteredOptions = options.filter(({ label }) =>\r\n        label.toLowerCase().includes(searchLower),\r\n      );\r\n    }\r\n    const hasMore = filteredOptions.length > prevOptions.length + 10;\r\n\r\n    return await fetch(\r\n      `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${search}`,\r\n      apiOptions,\r\n    )\r\n      .then(response => response.json())\r\n      .then(response => ({\r\n        options: response.data.map((city: ICity) => ({\r\n          label: `${city.name} ${city.countryCode}`,\r\n          value: { latitude: city.latitude, longitude: city.longitude },\r\n        })),\r\n      }))\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AsyncPaginate\r\n        placeholder=\"Search the city\"\r\n        debounceTimeout={600}\r\n        value={searchData}\r\n        shouldLoadMore={shouldLoadMore}\r\n        onChange={onSearchData}\r\n        loadOptions={loadOptions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}