{"ast":null,"code":"import { apiOptions } from '../../../../axios/geoApiOptions';\n\nasync function loadOptions(inputText) {\n  return await fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`, apiOptions).then(response => response.json()).then(response => ({\n    options: response.data.map(city => ({\n      label: `${city.name} ${city.countryCode}`,\n      value: {\n        latitude: city.latitude,\n        longitude: city.longitude\n      }\n    }))\n  })).catch(err => console.error(err));\n}\n\nexport default loadOptions; // async function loadOptions(_search: string, loadedOptions: unknown[]) {\n//   const start = loadedOptions.length;\n//   const end = start + LIMIT;\n//   const response = await fetch(`${URL}?_start=${start}&_end=${end}`);\n//   const json = await response.json();\n//   return {\n//     options: json.map(item => ({ value: item.id, label: item.title })),\n//     hasMore: true,\n//   };\n// }","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/loadOptions.ts"],"names":["apiOptions","loadOptions","inputText","fetch","then","response","json","options","data","map","city","label","name","countryCode","value","latitude","longitude","catch","err","console","error"],"mappings":"AAAA,SAASA,UAAT,QAA2B,iCAA3B;;AAOA,eAAeC,WAAf,CAA2BC,SAA3B,EAA8C;AAC5C,SAAO,MAAMC,KAAK,CACf,oFAAmFD,SAAU,EAD9E,EAEhBF,UAFgB,CAAL,CAIVI,IAJU,CAILC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJP,EAKVF,IALU,CAKLC,QAAQ,KAAK;AACjBE,IAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAmBC,IAAD,KAAkB;AAC3CC,MAAAA,KAAK,EAAG,GAAED,IAAI,CAACE,IAAK,IAAGF,IAAI,CAACG,WAAY,EADG;AAE3CC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAEL,IAAI,CAACK,QAAjB;AAA2BC,QAAAA,SAAS,EAAEN,IAAI,CAACM;AAA3C;AAFoC,KAAlB,CAAlB;AADQ,GAAL,CALH,EAWVC,KAXU,CAWJC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAXH,CAAb;AAYD;;AACD,eAAejB,WAAf,C,CACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import { apiOptions } from '../../../../axios/geoApiOptions';\r\ninterface ICity {\r\n  name: string;\r\n  countryCode: string;\r\n  latitude: string;\r\n  longitude: string;\r\n}\r\nasync function loadOptions(inputText: string) {\r\n  return await fetch(\r\n    `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n    apiOptions,\r\n  )\r\n    .then(response => response.json())\r\n    .then(response => ({\r\n      options: response.data.map((city: ICity) => ({\r\n        label: `${city.name} ${city.countryCode}`,\r\n        value: { latitude: city.latitude, longitude: city.longitude },\r\n      })),\r\n    }))\r\n    .catch(err => console.error(err));\r\n}\r\nexport default loadOptions;\r\n// async function loadOptions(_search: string, loadedOptions: unknown[]) {\r\n//   const start = loadedOptions.length;\r\n//   const end = start + LIMIT;\r\n//   const response = await fetch(`${URL}?_start=${start}&_end=${end}`);\r\n//   const json = await response.json();\r\n\r\n//   return {\r\n//     options: json.map(item => ({ value: item.id, label: item.title })),\r\n//     hasMore: true,\r\n//   };\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}