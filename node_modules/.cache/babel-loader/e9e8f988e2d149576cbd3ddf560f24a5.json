{"ast":null,"code":"// import { apiOptions } from '../../../../axios/geoApiOptions';\n// interface ICity {\n//   name: string;\n//   countryCode: string;\n//   latitude: string;\n//   longitude: string;\n// }\n// const loadOptions = async (inputText: string) => {\n//   return await fetch(\n//     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\n//     apiOptions,\n//   )\n//     .then(response => response.json())\n//     .then(response => ({\n//       options: response.data.map((city: ICity) => ({\n//         label: `${city.name} ${city.countryCode}`,\n//         value: { latitude: city.latitude, longitude: city.longitude },\n//       })),\n//     }))\n//     .catch(err => console.error(err));\n// };\n// export default loadOptions;\nconst LIMIT = 10;\nconst URL = 'https://jsonplaceholder.typicode.com/posts';\ns;\n\nasync function loadOptions(_search, loadedOptions) {\n  const start = loadedOptions.length;\n  const end = start + LIMIT;\n  const response = await fetch(`${URL}?_start=${start}&_end=${end}`);\n  const json = await response.json();\n  return {\n    options: json.map(item => ({\n      value: item.id,\n      label: item.title\n    })),\n    hasMore: true\n  };\n}\n\nexport default loadOptions;","map":{"version":3,"sources":["C:/apps/weather/src/pages/Home/components/Search/loadOptions.ts"],"names":["LIMIT","URL","s","loadOptions","_search","loadedOptions","start","length","end","response","fetch","json","options","map","item","value","id","label","title","hasMore"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,KAAK,GAAG,EAAd;AACA,MAAMC,GAAG,GAAG,4CAAZ;AACAC,CAAC;;AACD,eAAeC,WAAf,CAA2BC,OAA3B,EAA4CC,aAA5C,EAAsE;AACpE,QAAMC,KAAK,GAAGD,aAAa,CAACE,MAA5B;AACA,QAAMC,GAAG,GAAGF,KAAK,GAAGN,KAApB;AACA,QAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,GAAI,WAAUK,KAAM,SAAQE,GAAI,EAApC,CAA5B;AACA,QAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AAEA,SAAO;AACLC,IAAAA,OAAO,EAAED,IAAI,CAACE,GAAL,CAASC,IAAI,KAAK;AAAEC,MAAAA,KAAK,EAAED,IAAI,CAACE,EAAd;AAAkBC,MAAAA,KAAK,EAAEH,IAAI,CAACI;AAA9B,KAAL,CAAb,CADJ;AAELC,IAAAA,OAAO,EAAE;AAFJ,GAAP;AAID;;AACD,eAAehB,WAAf","sourcesContent":["// import { apiOptions } from '../../../../axios/geoApiOptions';\r\n// interface ICity {\r\n//   name: string;\r\n//   countryCode: string;\r\n//   latitude: string;\r\n//   longitude: string;\r\n// }\r\n// const loadOptions = async (inputText: string) => {\r\n//   return await fetch(\r\n//     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?minPopulation=1000000&namePrefix=${inputText}`,\r\n//     apiOptions,\r\n//   )\r\n//     .then(response => response.json())\r\n//     .then(response => ({\r\n//       options: response.data.map((city: ICity) => ({\r\n//         label: `${city.name} ${city.countryCode}`,\r\n//         value: { latitude: city.latitude, longitude: city.longitude },\r\n//       })),\r\n//     }))\r\n//     .catch(err => console.error(err));\r\n// };\r\n// export default loadOptions;\r\nconst LIMIT = 10;\r\nconst URL = 'https://jsonplaceholder.typicode.com/posts';\r\ns;\r\nasync function loadOptions(_search: string, loadedOptions: unknown[]) {\r\n  const start = loadedOptions.length;\r\n  const end = start + LIMIT;\r\n  const response = await fetch(`${URL}?_start=${start}&_end=${end}`);\r\n  const json = await response.json();\r\n\r\n  return {\r\n    options: json.map(item => ({ value: item.id, label: item.title })),\r\n    hasMore: true,\r\n  };\r\n}\r\nexport default loadOptions;\r\n"]},"metadata":{},"sourceType":"module"}